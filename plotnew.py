import re
from sklearn.metrics import roc_curve, auc

import torch

import pickle
import numpy as np
import scipy.stats as ss
import os
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.ticker as mticker
import matplotlib.colors as mcolors
import cv2
import copy
from data import AddGaussianNoise
from data import visualize_dataset, visualize_image,shuffle_dataset_target, add_noise_to_dataset, flip_noise_dataset, add_noise_to_model
import sys
from sklearn.decomposition import PCA
from numpy.linalg import norm
from numpy.linalg import inv
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
import scipy.stats as ss
# from permute_CUSUM_fix import Monitor
from numpy import linalg as la

def read_accuracy(file_name, key_word, format):
    file = open(file_name,'r')
    list1 = []
    
    # search the line including accuracy
    for line in file:
        m1=re.search(key_word, line)
        if m1:
            n1=re.findall(format, line) # 正则表达式
            if n1 is not None:
                list1.append(n1) # 提取精度数字
                # print('list1 is',list1)
        # break
        
    file.close()
    arr1 = np.array(list1).astype(float)
    # print(arr1[0,:])
    return arr1


def plot_accuracy():
    x = np.arange(1,51)
    y1 = np.around(read_accuracy('plot_log/targetnodetect1.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:50,1], decimals=3)

    y2 = np.around(read_accuracy('plot_log/target.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:50,1], decimals=3)
    # y3 = np.around(read_accuracy('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-cos-cluster_diff.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,3], decimals=3)
    # y4 = np.around(read_accuracy('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-mask-cluster_diff.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,3], decimals=3)
    # y5 = np.around(read_accuracy('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_true_diff.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,3], decimals=3)
    # y6 = np.around(read_accuracy('cs6.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,2], decimals=3)

    plt.plot(x,y1,'-',label='No Client Selection')
    plt.plot(x,y2,'-',label='PCA Method')
    # plt.plot(x,y3,'-',label='Cosine Similarity Method')
    # plt.plot(x,y4,'-',label='Binary Vector Method')
    # plt.plot(x,y5,'-',label='Pick Out All Adversarial Clients')
    # plt.plot(x,y6,'-',label='Binary Vector Method')
    
    plt.legend(loc='lower right')
    plt.xlabel('Round')
    plt.ylabel('Accuracy (%)')
    plt.title('Accuracy vs Round')
    plt.show()
    
def read_time_to_accuracy(file_name, key_word, format):
    file = open(file_name,'r')
    list1 = []
    
    # search the line including accuracy
    for line in file:
        m1=re.search(key_word, line)
        if m1:
            n1=re.findall(format, line) # 正则表达式
            if n1 is not None:
                list1.append(n1) # 提取精度数字
        
    file.close()
    arr1 = np.array(list1).astype(float)
    return arr1


def read_time(file_name, key_word, format):
    file = open(file_name,'r')
    list1 = []
    
    # search the line including accuracy
    for line in file:
        m1=re.search(key_word, line)
        if m1:
            n1=re.findall(format, line) # 正则表达式
            if n1 is not None:
                list1.append(n1) # 提取精度数字
        
    file.close()
    arr1 = np.array(list1).astype(float)
    for i in range(arr1.shape[0]):
        arr1[i,0] = np.sum(arr1[0:i+1,0],axis=0)
    return arr1
    

def plot_time_to_accuracy():
    # x2 = np.around(read_time('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_channel-0.2_valid-acc-cluster_diff.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:10,0], decimals=3)
    # y2 = np.around(read_accuracy('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_channel-0.2_valid-acc-cluster_diff.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:10,3], decimals=3)
    # x3 = np.around(read_accuracy('cs3.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:101,0], decimals=3)
    # y3 = np.around(read_accuracy('cs3.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,2], decimals=3)
    # x4 = np.around(read_accuracy('cs4.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:101,0], decimals=3)
    x4 = np.around(read_time('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-acc-cluster_diff.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:101,0], decimals=3)
    print('x4 is',x4)
    y4 = np.around(read_accuracy('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-acc-cluster_diff.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,3], decimals=3)

    # x5 = np.around(read_accuracy('cs5-400epoch.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:101,0], decimals=3)
    x5 = np.around(read_time('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-acc-cluster_diff.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:101,0], decimals=3)
    y5 = np.around(read_accuracy('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-cos-cluster_diff.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,3], decimals=3)

    # x6 = np.around(read_accuracy('cs6-400epoch.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:101,0], decimals=3)
    # x6 = np.around(read_time('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-acc-cluster_diff.txt', 'time cost', '[-+]?[0-9]+\.+[0-9]+')[0:101,0], decimals=3)

    # y6 = np.around(read_accuracy('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-mask-cluster_diff.txt', 'Test Epoch', '[-+]?[0-9]+\.+[0-9]+')[0:101,3], decimals=3)

    # plt.plot(x2,y2,'-',label='acc')
    plt.plot(x4,y4,'-',label='Validation Set Method')
    plt.plot(x5,y5,'-',label='Cosine Similarity Method')
    plt.plot(x6,y6,'-',label='Binary Vector Method')
    # plt.plot(x3,y3,'-',label='Pick Out All Adversarial Clients')
    # plt.plot(y2,x2,'-',label='No Client Selection')
    # plt.plot(y4,x4,'-',label='Validation Set Method')
    # plt.plot(y5,x5,'-',label='Cosine Similarity Method')
    # plt.plot(y6,x6,'-',label='Binary Vector Method')
    # plt.plot(y3,x3,'-',label='Pick Out All Adversarial Clients')
    plt.legend(loc='lower right')
    plt.xlabel('Time (s)')
    plt.ylabel('Accuracy (%)')
    plt.title('Accuracy vs Time')
    plt.show()



def read_roc(file_name,key_word1,key_word2,format1,format2):
    file = open(file_name,'r')
    list1 = []
    list_all = []
    arr_all = np.array(list_all).reshape((0,1))
    print(arr_all.shape)
    # list3 = []
    real_list = []
    real_arr = np.array(real_list).reshape((1,0))
    
    
    # search the line including accuracy
    loop_ten = 0
    for line in file:
        m1=re.search(key_word1, line)
        m2=re.search(key_word2, line)
        if m1:
            n1=re.findall(format1, line) # 正则表达式
            if n1 is not None:
                if loop_ten %10 != 9:
                    list1.append(n1) # 提取精度数字
                    loop_ten += 1
                else:
                    
                    list1.append(n1)
                    arr1 = np.array(list1).astype(float)
                    # print('arr1 shape',arr1.shape)
                    if key_word1 == 'output1 is':
                        arr1 = arr1[:,3].reshape((-1,1))
                    # print(arr1, arr1.shape) #(10,1)
                    max_val = np.amax(arr1, axis=0)
                    arr1 = arr1/max_val
                    # print(arr1)
                    arr_all = np.concatenate((arr_all, arr1), axis=0)
                    # print('arr_all is',arr_all)
                    list1 = []
                    loop_ten += 1
                    
                    
        elif m2:
            n2=re.findall(format2, line) # 正则表达式
            if n2 is not None:
                n2 = np.array(n2).astype(int).reshape((1,-1))
                n2 = n2[0,1:11].reshape((1,-1))
                real_arr = np.concatenate((real_arr,n2) , axis=1)  
    file.close()
    
    arr_all = np.transpose(arr_all)
    real_arr = real_arr + 1
    # print(arr_all, arr_all.shape)
    # print(real_arr, real_arr.shape)
    y_label = real_arr.reshape(-1)  # 非二进制需要pos_label
    y_pre = arr_all.reshape(-1)
    print(y_label.shape,y_pre.shape)
    return y_label, y_pre


def plot_detection_rate():

    
    y_label4, y_pre4 = read_roc('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-acc-cluster_diff.txt','logger mean','real list is','[-+]?[0-9]+\.+[0-9]+','[-+]?[0-9]+')
    fpr4, tpr4, thersholds4 = roc_curve(y_label4, y_pre4, pos_label=1)
    roc_auc4 = auc(fpr4, tpr4)
    # for i, value in enumerate(thersholds):
        # print("%f %f %f" % (fpr[i], tpr[i], value))
    y_label5, y_pre5 = read_roc('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-cos-cluster_diff.txt','output is','real list is','[-+]?[0-9]+\.+[0-9]+','[-+]?[0-9]+')
    fpr5, tpr5, thersholds5 = roc_curve(y_label5, y_pre5, pos_label=1)
    roc_auc5 = auc(fpr5, tpr5)

    y_label6, y_pre6 = read_roc('experiment_result/0_CIFAR10_wresnet28x2_100_0.1_iid_target_local-0.4_valid-mask-cluster_diff.txt','output1 is','real list is','[-+]?[0-9]+','[-+]?[0-9]+')
    fpr6, tpr6, thersholds6 = roc_curve(y_label6, y_pre6, pos_label=2)
    roc_auc6 = auc(fpr6, tpr6)
    
    
    
    plt.plot(fpr4, tpr4, '-.', label='Validation Set Method (area = {0:.2f})'.format(roc_auc4), lw=2)
    plt.plot(fpr5, tpr5, '--', label='Cosine Similarity Method (area = {0:.2f})'.format(roc_auc5), lw=2)
    plt.plot(fpr6, tpr6, ':', label='Binary Vector Method (area = {0:.2f})'.format(roc_auc6), lw=2)
    
    plt.xlim([-0.05, 1.05])  # 设置x、y轴的上下限，以免和边缘重合，更好的观察图像的整体
    plt.ylim([-0.05, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')  # 可以使用中文，但需要导入一些库即字体
    plt.title('ROC Curve')
    plt.legend(loc="lower right")
    plt.show()


    # plt.plot(x,y2,'-',label='No Client Selection')
    # plt.plot(x,y4,'-',label='Validation Set Method')
    # plt.plot(x,y5,'-',label='Cosine Similarity Method')
    # plt.plot(x,y6,'-',label='Binary Vector Method')
    # plt.plot(x,y3,'-',label='Pick Out All Adversarial Clients')
    # plt.legend(loc='lower right')


# apply pca model trained by round0-99 to gradient update round0-99(0-99 attack)
def plot_pca_scatter():
    with open('subspace100_monitor6_2col_arr.pyc', 'rb') as f:
        VL = pickle.load(f)
    good_np_array = VL
    num_round = 100
    # cmap_names = ["viridis", "RdBu", "Set1", "jet", "rainbow"]
    cmap_name = 'viridis'
    cmap = mpl.cm.get_cmap(cmap_name, num_round)
    color_list = cmap(np.linspace(0,1,num_round))
    fig, axes = plt.subplots(1, 1, figsize=(10, 10))
    for i in range(num_round):

        x_bad = good_np_array[i*5:i*5+1,0]
        y_bad = good_np_array[i*5:i*5+1,1]
        x_good = good_np_array[i*5+1:(i+1)*5,0]
        y_good = good_np_array[i*5+1:(i+1)*5,1]
        
        if i==0:
            im = axes.scatter(x_bad,y_bad,color=color_list[i],marker='x',label='adversarial client')

        # colors = np.where(np.array(y) > 0, "green", "red")
        # print('xy', x, y)
        
            im = axes.scatter(x_good,y_good,color=color_list[i],marker='o',label='normal client')
        else:
            im = axes.scatter(x_bad,y_bad,color=color_list[i],marker='x')

            im = axes.scatter(x_good,y_good,color=color_list[i],marker='o')


    axes.legend(loc="upper left")
    cmap = mpl.cm.viridis
    norm = mcolors.Normalize(vmin=0, vmax=100)
    im = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
    # locator = mticker.MultipleLocator(10)
    # formatter = mticker.StrMethodFormatter('{x:.1f}')
    
    cbar = fig.colorbar(im, ax=axes, orientation='vertical',label='round number')
    ticks = np.linspace(0, 100, 11)
    # ticklabels = [formatter(tick) for tick in ticks]
    cbar.set_ticks(ticks)
    # cbar.set_ticklabels(ticklabels)
    axes.set_title('scatter plot of pricipal component')  
    # plt.xscale('symlog')
    # plt.yscale('symlog')
    plt.xlabel('1st principal component')
    plt.ylabel('2rd principal component')
    
    plt.show()

# apply pca trained by round0-49(all normal) to round0-99(0-49 normal, 50-100 attack)
def plot_pca_scatter1():

    with open('subspace50_monitor6_2col_arr.pyc', 'rb') as f:
        VL50 = pickle.load(f)

    with open('subspace100_monitor6_2col_arr.pyc', 'rb') as f:
        VL100 = pickle.load(f)
    good_np_array50 = VL50
    good_np_array100 = VL100
    num_round = 50
    # cmap_names = ["viridis", "RdBu", "Set1", "jet", "rainbow"]
    cmap_name = 'viridis'
    cmap = mpl.cm.get_cmap(cmap_name, num_round)
    color_list = cmap(np.linspace(0,1,num_round))
    fig, axes = plt.subplots(1, 1, figsize=(10, 10))
    for i in range(50):

        # x_bad = good_np_array[i*5:i*5+1,0]
        # y_bad = good_np_array[i*5:i*5+1,1]
        x_good = good_np_array100[i*5:(i+1)*5,0]
        y_good = good_np_array100[i*5:(i+1)*5,1]
        
        if i==0:
        #     im = axes.scatter(x_bad,y_bad,color=color_list[i],marker='x',label='adversarial client')

        # colors = np.where(np.array(y) > 0, "green", "red")
        # print('xy', x, y)
        
            im = axes.scatter(x_good,y_good,color=color_list[i],marker='o',label='normal client')
        else:
        #     # im = axes.scatter(x_bad,y_bad,color=color_list[i],marker='x')

            im = axes.scatter(x_good,y_good,color=color_list[i],marker='o')

    for i in range(51,num_round):

        x_bad = good_np_array100[i*5:i*5+1,0]
        y_bad = good_np_array100[i*5:i*5+1,1]
        x_good = good_np_array100[i*5+1:(i+1)*5,0]
        y_good = good_np_array100[i*5+1:(i+1)*5,1]
        
        if i==51:
            im = axes.scatter(x_bad,y_bad,color=color_list[i],marker='x',label='adversarial client')

        # colors = np.where(np.array(y) > 0, "green", "red")
        # print('xy', x, y)
        
            im = axes.scatter(x_good,y_good,color=color_list[i],marker='o')
        else:
            im = axes.scatter(x_bad,y_bad,color=color_list[i],marker='x')

            im = axes.scatter(x_good,y_good,color=color_list[i],marker='o')



    axes.legend(loc="upper left")
    cmap = mpl.cm.viridis
    norm = mcolors.Normalize(vmin=0, vmax=100)
    im = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
    # locator = mticker.MultipleLocator(10)
    # formatter = mticker.StrMethodFormatter('{x:.1f}')
    
    cbar = fig.colorbar(im, ax=axes, orientation='vertical',label='round number')
    ticks = np.linspace(0, 100, 11)
    # ticklabels = [formatter(tick) for tick in ticks]
    cbar.set_ticks(ticks)
    # cbar.set_ticklabels(ticklabels)
    axes.set_title('scatter plot of pricipal component')  
    # plt.xscale('symlog')
    # plt.yscale('symlog')
    plt.xlabel('1st principal component')
    plt.ylabel('2rd principal component')
    
    plt.show()


def plot_residual_vs_epoch():
    # fig, axes = plt.subplots(1, 1, figsize=(10, 10))
    # x_values = list(range(1,101))
    # y_values = [-0.0644829106312633, -0.06559176348143927, -0.07140315693480265, -0.08130028657560393, -0.09733002276419728, -0.12127809301840947, -0.1571191107960424, -0.2069192255880668, -0.264292915563069, -0.3047769314159277, -0.3041308885329881, -0.2599464139422875, -0.20528169564801663, -0.16432264639985625, -0.13448134883280677, -0.114152560412764, -0.09941516783491813, -0.08872354035900992, -0.08002626657633102, -0.07366354199500376, -0.06811022139396698, -0.06487412473171603, -0.061405547823376073, -0.05846896093634472, -0.056464159791225536, -0.05431474822616105, -0.052006026489785515, -0.05016912393637343, -0.049468646457694554, -0.0478090810363819, -0.046239849607057903, -0.0450149021660465, -0.04404460448629251, -0.04320218698496643, -0.04295377061541135, -0.041727321048719214, -0.04181315647478338, -0.04049277767728067, -0.040022774128218135, -0.039334020299806954, -0.03909892876894024, -0.03859159992825818, -0.03768768627973981, -0.0374936789534949, -0.036874812455302206, -0.036835845942948614, -0.03601709360171182, -0.03550422065178037, -0.034563525933705735, -0.03478008974916444, -0.034355326614105404, -0.03377972017437715, -0.033607393229137694, -0.03320431799204432, -0.03300693241228184, -0.03227437981441003, -0.032552684657126726, -0.031527208585291365, -0.03176940373796176, -0.031063748486489236, -0.030297335208822364, -0.03015070558555492, -0.030722674332109297, -0.03014786411594448, -0.029581687913807976, -0.02937193886783353, -0.029016731102232136, -0.029120868954691976, -0.028696029329017807, -0.028074690910056606, -0.02826993053938266, -0.02781707003403537, -0.027652417640172847, -0.0275772059244117, -0.026895348681104363, -0.02667306945876836, -0.02676984560056011, -0.026572393351779935, -0.025857869418269838, -0.025913311510870222, -0.02533381318827551, -0.0256300755763172, -0.02523807334536071, -0.02493403372513265, -0.025251829410985027, -0.024713656980246655, -0.024362393590012944, -0.02464886741826587, -0.02428305119316041, -0.024310347037715018, -0.023242747569872813, -0.023074330519698944, -0.023399536802825374, -0.023424975999384468, -0.023047155769450448, -0.022704580160818312, -0.022372297553796806, -0.022698182018571485, -0.022562057020083258, -0.02207095414385991, -0.022372139620080386, -0.022086072792123674, -0.02142568602242907, -0.022091462461325866, -0.021296286844012795, -0.02132775425066183, -0.02100758666240111, -0.02082372248890422, -0.021010234900119034, -0.02085719733957289, -0.020371003712504946, -0.020601943460979173, -0.020163560493692688, -0.02014070016638452, -0.020345779362390737, -0.020197558468626416, -0.0203091637033522, -0.019856535859043182, -0.020109620003888683, -0.01947973130644336, -0.020126195260985413, -0.019599142504292122, -0.019214266077072946, -0.019518737976314295, -0.019850739337456992, -0.019311477486745773, -0.019558114754412395, -0.019228571230307707, -0.019189235823622735, -0.01903938036542359, -0.018370712098501732, -0.018952874332687813, -0.019000941310102056, -0.019553961576186503, -0.018967381788646855, -0.018184927343136002, -0.018333906867211543, -0.01914013313990941, -0.01853777963935814, -0.018275029709604054, -0.01810390814357627, -0.018853742182658773, -0.01793810536532748, -0.018374820880502497, -0.018025598535751343, -0.01791558662571127, -0.01839491117362262, -0.01830971440021122, -0.018391423479113406, -0.018193810319442755, -0.018074416320496944, -0.01784869342708443, -0.01757419536881121, -0.017159172624918215, -0.017123720657623336, -0.017196115220115802, -0.017083537806945655, -0.017419225355857753, -0.01721286414006565, -0.017830499050206196, -0.017608788499070757, -0.017422311799520643, -0.01708877416634084, -0.016897522237486622, -0.017010331245676382, -0.017594452901382854, -0.017336086292003453, -0.01765211744129691, -0.017512184488959304, -0.017093621564497716, -0.017519239464925073, -0.017162752712709485, -0.01724535308942575, -0.016429625150174973, -0.01730766118518002, -0.017411105632488273, -0.017600751689749415, -0.017348335160620124, -0.016802341520915837, -0.016696760167869674, -0.01701333506693808, -0.017384118939072213, -0.01748223683508717, -0.016426641976851727, -0.01597493172695075, -0.01583667747961582, -0.016466614682663132, -0.01676648237400658, -0.016315773434795552, -0.01645262022954622, -0.01665893989498443, -0.016422280120676168, -0.016320539689403016, -0.016704732384475396, -0.015917187497924114, -0.01612860684278882, -0.016932470226924845, -0.016173113992163087, -0.016382809989819787, -0.01619344677840485, -0.016403376644626277, -0.01701312743786407, -0.015757539869686633, -0.01610398241160789, -0.01556873859138451, -0.016180729049325913, -0.016465446588810696, -0.016169612102730192, -0.015911862828109875, -0.015317034959350646, -0.015866475422467507, -0.01604439925520301, -0.01580639511587142, -0.016336312840181413, -0.01532112368464326, -0.01594312943326329, -0.015917597069767087, -0.01566580946879704, -0.01544327944527623, -0.01531267750861019, -0.01624780239183646, -0.015620898122807935, -0.01541429959921374, -0.0162149173937365, -0.01667225161523933, -0.015617054249970203, -0.01569469247335695, -0.014948619141383587, -0.015187543983281475, -0.015603913952819218, -0.01633807832775626, -0.01559756761588476, -0.015602972933885201, -0.015711122357768333, -0.01505736091740002, -0.015988571227311475, -0.015606598273939919, -0.01535704774372635, -0.015107175886815767, -0.015369382798662307, -0.015777089201484407, -0.01536619162426323, -0.014593557513542053, -0.015448870310728672, -0.015102981075740662, -0.01488050327052462, -0.015700428089552056, -0.01519808698884912, -0.015583058624671343, -0.015052245576117895, -0.015478017233387674, -0.015593638053880667, -0.015583060846552133, -0.015769211830079993, -0.015591430779854202, -0.015752619669116875, -0.01604983548230694, -0.015763528669658352, -0.015500119327222724, -0.015152255859511563, -0.015574159454959206, -0.014906914783732121, -0.015554028939222832, -0.014684323793431046, -0.014951750295399443, -0.015167048678125555, -0.01570350092983699, -0.01635664657605747, -0.01586706340507694, -0.015001037233728289, -0.015104005697219328, -0.015542125339500718, -0.015848255170381752, -0.01522557686617438, -0.01548581280801955, -0.015740449519353335, -0.014616813543362969, -0.015005321693614381, -0.016191136124566567, -0.015272746032670068, -0.015588693240221265, -0.015137613581750718, -0.014421370957685163, -0.015916267987927665, -0.015373201679351835, -0.014836386520003825, -0.01512621012165873, -0.015570436066809025, -0.014861600780515734, -0.015421463163746051, -0.014520104990638582, -0.01462587769916068, -0.015119961799944782, -0.01413587402697407, -0.014691665138071993, -0.015536015786901072, -0.015201227850075438, -0.015622531640950083, -0.01493627282070828, -0.015517074465246748, -0.015233675139808712, -0.014725840966093428, -0.01466041625695903, -0.014628767997252727, -0.01544553466065025, -0.014782579158954456, -0.014798621303019328, -0.014494467917293417, -0.015340989248774299, -0.014543298072211143, -0.014188203016190813, -0.01483852131347227, -0.01473408467827976, -0.015093252120610415, -0.014345005614763628, -0.01412635663139973, -0.014589203585771239, -0.015130245471912222, -0.014759830155889064, -0.014997700059007538, -0.014370690219415519, -0.01474493780848197, -0.015026338519128234, -0.015583736181069844, -0.016341816762325757, -0.014916021941343336, -0.014925322874904279, -0.014503265768840198, -0.015128579375222075, -0.014608778020619308, -0.014888334644398604, -0.014953996505717373, -0.015175154285079654, -0.014848782852267267, -0.015351932233791452, -0.014156227193085909, -0.014481056098146396, -0.014345278755334335, -0.014637528369244297, -0.014584431582736545, -0.014872979050862576, -0.014750357015821678, -0.013948477237498473, -0.014212352891105343, -0.01499676941141223, -0.0153576955846761, -0.01510469965694444, -0.014810337627738358, -0.01427234102974322, -0.014274594867895125, -0.014514762759854069, -0.014326500539855194, -0.014874024104215452, -0.014329942681417749, -0.014032859678870737, -0.01528038704088395, -0.014693512004365972, -0.014955897021788452, -0.014413257723042994, -0.014808250364327289, -0.013951435723151134, -0.01520201955435312, -0.013934335411207437, -0.013845298584671204, -0.014794762459459735, -0.01426335332154204, -0.014445417050090706, -0.014879720598206058, -0.014498627725989918, -0.014534215906091334, -0.013984253013674024, -0.014252555452403549, -0.014359296995645691, -0.014620133031622011, -0.0149046712731069, -0.014856909690671298, -0.014380869422465758, -0.014890648644287798, -0.014612400820010071, -0.01441686200412977, -0.01400136479654309, -0.014555860496006014, -0.014580828452646624, -0.01432945564312135, -0.014658957886375133, -0.014242691806572734, -0.0147183104282284, -0.014881292597995881, -0.013929809402044194, -0.014452404556928988, -0.01507861490709455, -0.014608342475791408, -0.014329459294852685, -0.014708843914705163, -0.014024747421881787, -0.014073162039231521, -0.015603309235110911, -0.014371134199199751, -0.014450403124120357, -0.014093328888817475, -0.014788600387336617, -0.015375045719578763, -0.014827284595023582, -0.01401349988165949, -0.014617042643731076, -0.01460199099177206, -0.014692716471523107, -0.014849565501755967, -0.013447937860195885, -0.014662009185122324, -0.014230994473639909, -0.01476308901594885, -0.01509265243044567, -0.01521381068964745, -0.01427430958691181, -0.015015778325222414, -0.014672049340755916, -0.014152661768360424, -0.01424409745950643, -0.015091245679053596, -0.014537132642742243, -0.014950585257060903, -0.014412275042591271, -0.013992236848489877, -0.014133246815349861, -0.014339813725962335, -0.014529767816734093, -0.014822132550562733, -0.014353138650595447, -0.014443389133874239, -0.014273117610359539, -0.014768848089356856, -0.014739727372042804, -0.013891038206979971, -0.013597754737095999, -0.014395612012907665, -0.01348560034132014, -0.014553525910357426, -0.014492010085143212, -0.013543268063904896, -0.013929864502677743, -0.01427334553655673, -0.013953824611698801, -0.014543583079703801, -0.014505741572882988, -0.014317421901320798, -0.014107832066605184, -0.013638498154364373, -0.014032928936781618, -0.014800249013558663, -0.01395167935255643, -0.014071692217093626, -0.014390558737891624, -0.014259765744322844, -0.01387658548134622, -0.01421672656541975, -0.014252073169349934, -0.013887165304137103, -0.0146731770946251, -0.013608308422935757, -0.014168569079346428, -0.014995045670135062, -0.01436324282089314, -0.014204577724922719, -0.013755464451981366, -0.014163554887778157, -0.01428769783046168, -0.013589013803767504, -0.013358013815986279, -0.014480288749068607, -0.013672389636447199, -0.014326075900887657, -0.013555915101543603, -0.014495116744939926, -0.014199175795354832, -0.013245205802133243, -0.014221179300056874, -0.01476428846629221, -0.014342269391157986, -0.01463233351516476, -0.01461054050194193, -0.015063013059482544, -0.014319099273364437, -0.013812497697848258, -0.014382520446438885, -0.013962784026319466, -0.014284497464630168, -0.013396398156643001, -0.01395588991722361, -0.01497061344446708, -0.01444505571527972, -0.013711579309142428, -0.013696762526080626, -0.014209669127643496, -0.014508260457142883, -0.014990720754808489, -0.01386685665084407, -0.013884583199489455, -0.014255556070419794, -0.014284033837855967]
    # y_values = [-y for y in y_values]

    # # Plotting the line chart
    # plt.plot(x_values, y_values[0:100], marker='o', linestyle='-')

    # # Adding title and labels
    # plt.title('residual vs round')
    # plt.xlabel('round')
    # plt.ylabel('residual')

    # # Displaying the chart
    # plt.show()


    x = np.arange(1, 101, 1)
    y_mean = [-0.0644829106312633, -0.06559176348143927, -0.07140315693480265, -0.08130028657560393, -0.09733002276419728, -0.12127809301840947, -0.1571191107960424, -0.2069192255880668, -0.264292915563069, -0.3047769314159277, -0.3041308885329881, -0.2599464139422875, -0.20528169564801663, -0.16432264639985625, -0.13448134883280677, -0.114152560412764, -0.09941516783491813, -0.08872354035900992, -0.08002626657633102, -0.07366354199500376, -0.06811022139396698, -0.06487412473171603, -0.061405547823376073, -0.05846896093634472, -0.056464159791225536, -0.05431474822616105, -0.052006026489785515, -0.05016912393637343, -0.049468646457694554, -0.0478090810363819, -0.046239849607057903, -0.0450149021660465, -0.04404460448629251, -0.04320218698496643, -0.04295377061541135, -0.041727321048719214, -0.04181315647478338, -0.04049277767728067, -0.040022774128218135, -0.039334020299806954, -0.03909892876894024, -0.03859159992825818, -0.03768768627973981, -0.0374936789534949, -0.036874812455302206, -0.036835845942948614, -0.03601709360171182, -0.03550422065178037, -0.034563525933705735, -0.03478008974916444, -0.034355326614105404, -0.03377972017437715, -0.033607393229137694, -0.03320431799204432, -0.03300693241228184, -0.03227437981441003, -0.032552684657126726, -0.031527208585291365, -0.03176940373796176, -0.031063748486489236, -0.030297335208822364, -0.03015070558555492, -0.030722674332109297, -0.03014786411594448, -0.029581687913807976, -0.02937193886783353, -0.029016731102232136, -0.029120868954691976, -0.028696029329017807, -0.028074690910056606, -0.02826993053938266, -0.02781707003403537, -0.027652417640172847, -0.0275772059244117, -0.026895348681104363, -0.02667306945876836, -0.02676984560056011, -0.026572393351779935, -0.025857869418269838, -0.025913311510870222, -0.02533381318827551, -0.0256300755763172, -0.02523807334536071, -0.02493403372513265, -0.025251829410985027, -0.024713656980246655, -0.024362393590012944, -0.02464886741826587, -0.02428305119316041, -0.024310347037715018, -0.023242747569872813, -0.023074330519698944, -0.023399536802825374, -0.023424975999384468, -0.023047155769450448, -0.022704580160818312, -0.022372297553796806, -0.022698182018571485, -0.022562057020083258, -0.02207095414385991, -0.022372139620080386, -0.022086072792123674, -0.02142568602242907, -0.022091462461325866, -0.021296286844012795, -0.02132775425066183, -0.02100758666240111, -0.02082372248890422, -0.021010234900119034, -0.02085719733957289, -0.020371003712504946, -0.020601943460979173, -0.020163560493692688, -0.02014070016638452, -0.020345779362390737, -0.020197558468626416, -0.0203091637033522, -0.019856535859043182, -0.020109620003888683, -0.01947973130644336, -0.020126195260985413, -0.019599142504292122, -0.019214266077072946, -0.019518737976314295, -0.019850739337456992, -0.019311477486745773, -0.019558114754412395, -0.019228571230307707, -0.019189235823622735, -0.01903938036542359, -0.018370712098501732, -0.018952874332687813, -0.019000941310102056, -0.019553961576186503, -0.018967381788646855, -0.018184927343136002, -0.018333906867211543, -0.01914013313990941, -0.01853777963935814, -0.018275029709604054, -0.01810390814357627, -0.018853742182658773, -0.01793810536532748, -0.018374820880502497, -0.018025598535751343, -0.01791558662571127, -0.01839491117362262, -0.01830971440021122, -0.018391423479113406, -0.018193810319442755, -0.018074416320496944, -0.01784869342708443, -0.01757419536881121, -0.017159172624918215, -0.017123720657623336, -0.017196115220115802, -0.017083537806945655, -0.017419225355857753, -0.01721286414006565, -0.017830499050206196, -0.017608788499070757, -0.017422311799520643, -0.01708877416634084, -0.016897522237486622, -0.017010331245676382, -0.017594452901382854, -0.017336086292003453, -0.01765211744129691, -0.017512184488959304, -0.017093621564497716, -0.017519239464925073, -0.017162752712709485, -0.01724535308942575, -0.016429625150174973, -0.01730766118518002, -0.017411105632488273, -0.017600751689749415, -0.017348335160620124, -0.016802341520915837, -0.016696760167869674, -0.01701333506693808, -0.017384118939072213, -0.01748223683508717, -0.016426641976851727, -0.01597493172695075, -0.01583667747961582, -0.016466614682663132, -0.01676648237400658, -0.016315773434795552, -0.01645262022954622, -0.01665893989498443, -0.016422280120676168, -0.016320539689403016, -0.016704732384475396, -0.015917187497924114, -0.01612860684278882, -0.016932470226924845, -0.016173113992163087, -0.016382809989819787, -0.01619344677840485, -0.016403376644626277, -0.01701312743786407, -0.015757539869686633, -0.01610398241160789, -0.01556873859138451, -0.016180729049325913, -0.016465446588810696, -0.016169612102730192, -0.015911862828109875, -0.015317034959350646, -0.015866475422467507, -0.01604439925520301, -0.01580639511587142, -0.016336312840181413, -0.01532112368464326, -0.01594312943326329, -0.015917597069767087, -0.01566580946879704, -0.01544327944527623, -0.01531267750861019, -0.01624780239183646, -0.015620898122807935, -0.01541429959921374, -0.0162149173937365, -0.01667225161523933, -0.015617054249970203, -0.01569469247335695, -0.014948619141383587, -0.015187543983281475, -0.015603913952819218, -0.01633807832775626, -0.01559756761588476, -0.015602972933885201, -0.015711122357768333, -0.01505736091740002, -0.015988571227311475, -0.015606598273939919, -0.01535704774372635, -0.015107175886815767, -0.015369382798662307, -0.015777089201484407, -0.01536619162426323, -0.014593557513542053, -0.015448870310728672, -0.015102981075740662, -0.01488050327052462, -0.015700428089552056, -0.01519808698884912, -0.015583058624671343, -0.015052245576117895, -0.015478017233387674, -0.015593638053880667, -0.015583060846552133, -0.015769211830079993, -0.015591430779854202, -0.015752619669116875, -0.01604983548230694, -0.015763528669658352, -0.015500119327222724, -0.015152255859511563, -0.015574159454959206, -0.014906914783732121, -0.015554028939222832, -0.014684323793431046, -0.014951750295399443, -0.015167048678125555, -0.01570350092983699, -0.01635664657605747, -0.01586706340507694, -0.015001037233728289, -0.015104005697219328, -0.015542125339500718, -0.015848255170381752, -0.01522557686617438, -0.01548581280801955, -0.015740449519353335, -0.014616813543362969, -0.015005321693614381, -0.016191136124566567, -0.015272746032670068, -0.015588693240221265, -0.015137613581750718, -0.014421370957685163, -0.015916267987927665, -0.015373201679351835, -0.014836386520003825, -0.01512621012165873, -0.015570436066809025, -0.014861600780515734, -0.015421463163746051, -0.014520104990638582, -0.01462587769916068, -0.015119961799944782, -0.01413587402697407, -0.014691665138071993, -0.015536015786901072, -0.015201227850075438, -0.015622531640950083, -0.01493627282070828, -0.015517074465246748, -0.015233675139808712, -0.014725840966093428, -0.01466041625695903, -0.014628767997252727, -0.01544553466065025, -0.014782579158954456, -0.014798621303019328, -0.014494467917293417, -0.015340989248774299, -0.014543298072211143, -0.014188203016190813, -0.01483852131347227, -0.01473408467827976, -0.015093252120610415, -0.014345005614763628, -0.01412635663139973, -0.014589203585771239, -0.015130245471912222, -0.014759830155889064, -0.014997700059007538, -0.014370690219415519, -0.01474493780848197, -0.015026338519128234, -0.015583736181069844, -0.016341816762325757, -0.014916021941343336, -0.014925322874904279, -0.014503265768840198, -0.015128579375222075, -0.014608778020619308, -0.014888334644398604, -0.014953996505717373, -0.015175154285079654, -0.014848782852267267, -0.015351932233791452, -0.014156227193085909, -0.014481056098146396, -0.014345278755334335, -0.014637528369244297, -0.014584431582736545, -0.014872979050862576, -0.014750357015821678, -0.013948477237498473, -0.014212352891105343, -0.01499676941141223, -0.0153576955846761, -0.01510469965694444, -0.014810337627738358, -0.01427234102974322, -0.014274594867895125, -0.014514762759854069, -0.014326500539855194, -0.014874024104215452, -0.014329942681417749, -0.014032859678870737, -0.01528038704088395, -0.014693512004365972, -0.014955897021788452, -0.014413257723042994, -0.014808250364327289, -0.013951435723151134, -0.01520201955435312, -0.013934335411207437, -0.013845298584671204, -0.014794762459459735, -0.01426335332154204, -0.014445417050090706, -0.014879720598206058, -0.014498627725989918, -0.014534215906091334, -0.013984253013674024, -0.014252555452403549, -0.014359296995645691, -0.014620133031622011, -0.0149046712731069, -0.014856909690671298, -0.014380869422465758, -0.014890648644287798, -0.014612400820010071, -0.01441686200412977, -0.01400136479654309, -0.014555860496006014, -0.014580828452646624, -0.01432945564312135, -0.014658957886375133, -0.014242691806572734, -0.0147183104282284, -0.014881292597995881, -0.013929809402044194, -0.014452404556928988, -0.01507861490709455, -0.014608342475791408, -0.014329459294852685, -0.014708843914705163, -0.014024747421881787, -0.014073162039231521, -0.015603309235110911, -0.014371134199199751, -0.014450403124120357, -0.014093328888817475, -0.014788600387336617, -0.015375045719578763, -0.014827284595023582, -0.01401349988165949, -0.014617042643731076, -0.01460199099177206, -0.014692716471523107, -0.014849565501755967, -0.013447937860195885, -0.014662009185122324, -0.014230994473639909, -0.01476308901594885, -0.01509265243044567, -0.01521381068964745, -0.01427430958691181, -0.015015778325222414, -0.014672049340755916, -0.014152661768360424, -0.01424409745950643, -0.015091245679053596, -0.014537132642742243, -0.014950585257060903, -0.014412275042591271, -0.013992236848489877, -0.014133246815349861, -0.014339813725962335, -0.014529767816734093, -0.014822132550562733, -0.014353138650595447, -0.014443389133874239, -0.014273117610359539, -0.014768848089356856, -0.014739727372042804, -0.013891038206979971, -0.013597754737095999, -0.014395612012907665, -0.01348560034132014, -0.014553525910357426, -0.014492010085143212, -0.013543268063904896, -0.013929864502677743, -0.01427334553655673, -0.013953824611698801, -0.014543583079703801, -0.014505741572882988, -0.014317421901320798, -0.014107832066605184, -0.013638498154364373, -0.014032928936781618, -0.014800249013558663, -0.01395167935255643, -0.014071692217093626, -0.014390558737891624, -0.014259765744322844, -0.01387658548134622, -0.01421672656541975, -0.014252073169349934, -0.013887165304137103, -0.0146731770946251, -0.013608308422935757, -0.014168569079346428, -0.014995045670135062, -0.01436324282089314, -0.014204577724922719, -0.013755464451981366, -0.014163554887778157, -0.01428769783046168, -0.013589013803767504, -0.013358013815986279, -0.014480288749068607, -0.013672389636447199, -0.014326075900887657, -0.013555915101543603, -0.014495116744939926, -0.014199175795354832, -0.013245205802133243, -0.014221179300056874, -0.01476428846629221, -0.014342269391157986, -0.01463233351516476, -0.01461054050194193, -0.015063013059482544, -0.014319099273364437, -0.013812497697848258, -0.014382520446438885, -0.013962784026319466, -0.014284497464630168, -0.013396398156643001, -0.01395588991722361, -0.01497061344446708, -0.01444505571527972, -0.013711579309142428, -0.013696762526080626, -0.014209669127643496, -0.014508260457142883, -0.014990720754808489, -0.01386685665084407, -0.013884583199489455, -0.014255556070419794, -0.014284033837855967]
    y_mean = [-y for y in y_mean]
    y_std =  [0.0006447092955851196, 0.00036060253581420855, 0.00024647229062190254, 0.0004360860346032078, 0.0005478357078066896, 0.0003954960284331143, 0.0002854013567514241, 0.0004077572371300582, 0.0007960821753394261, 0.0006890067420946012, 0.0005967706678166868, 0.000711659363652903, 0.00021199908585683877, 0.00029405072508637, 0.0004125820878748184, 0.00024986280235949823, 0.000998713180987672, 0.0008075665013628844, 0.0003917886093228986, 0.0005899904421952143, 0.0004907148015093264, 0.000665615810401542, 0.00036648306582716633, 0.0005935920703593133, 0.0006686242374270438, 0.0005504689408950927, 0.00047643776567489086, 0.000580944663798882, 0.00047357467019809997, 0.0005176248453783264, 0.0007604657972766008, 0.000710314280684479, 0.0006882341297428341, 0.0007347742647953714, 0.0008852581874413378, 0.0010348079515730057, 0.0007434600352877011, 0.0012205447813923571, 0.00040638024466569246, 0.0006496587611961305, 0.0005952658792596934, 0.00027112904456155686, 0.0005954469721784049, 0.0006320502572474565, 0.0011093084522015865, 0.0007140681661430714, 0.0007803749279762808, 0.00046895730400141035, 0.0004945734379319483, 0.0003030333404674793, 0.0008498739096538597, 0.0007590588532039217, 0.0001708955351330853, 0.0005422073161016458, 0.0009165313885287497, 0.000662573911256903, 0.0006270525861477369, 0.0006687674275874485, 0.0003623390853181559, 0.0006936410820583932, 0.0004167826288112555, 0.00033549291052320924, 0.0007028311538523583, 0.0007354798517378248, 0.0006109304159356416, 0.0006075155981336185, 0.0005156572384449753, 0.000484020922371618, 0.0007248294927815503, 0.000535242636530587, 0.0008752426065040988, 0.0007643921309961902, 0.0012515985047134887, 0.0005666852036638297, 0.0009872805612633397, 0.0003365198526173479, 0.0007888497531875222, 0.0007559039306212187, 0.0005862774697792014, 0.0009618392558634006, 0.0009483505774633552, 0.00120142987614349, 0.00041400190870290936, 0.0011753047637566199, 0.00028583696178220106, 0.0008349037546479685, 0.0006011390446606197, 0.000464414137710714, 0.001025993168705888, 0.0008314850213672906, 0.00039481294832889596, 0.0011391149741333047, 0.0007809167615908579, 0.0008797084943437366, 0.0006750412081308381, 0.0005788271982090126, 0.0010227690721360278, 0.0010260081113274402, 0.0008273794260115402, 0.001072375913768811, 0.000565070055103695, 0.0013833418936204838, 0.00030037640228510165, 0.0011834837502070902, 0.0007785315336223038, 0.000959753583540762, 0.00039343485297780077, 0.0005002472022942963, 0.0007519413036395617, 0.00048383276301926573, 0.0009327023630413942, 0.0008646291497231373, 0.00114859423280492, 0.0011601053718144456, 0.0008576021296068762, 0.0007191777778695367, 0.0009726513964004206, 0.0007519538472382779, 0.0008286048034247104, 0.0008510820021746863, 0.001071389115020937, 0.0008096572947851767, 0.0004170631816911389, 0.0008015036670456987, 0.0012733984867125026, 0.0008458861427101306, 0.001578424328966492, 0.000785884210761375, 0.0008528812490825276, 0.001503147757576765, 0.001068021169030229, 0.0011974245228489634, 0.0005968734768958625, 0.0009205145811126015, 0.0008364488764619323, 0.0008794959729671626, 0.001294677985683931, 0.001358613973612577, 0.001017411987486413, 0.0013853128096224655, 0.0008847093739772834, 0.0008444749559414547, 0.0003812202772615037, 0.0007727687621406926, 0.0013746406331500225, 0.0007661675829683841, 0.00084106959702696, 0.0008842818464927469, 0.0009295633348752881, 0.0014212351647710547, 0.0006080468934341004, 0.0013169803421568863, 0.0007771602481742641, 0.0006700389847473946, 0.0009778199648609025, 0.0010123478638006697, 0.0008218166109920121, 0.001023634864536509, 0.0010188765103793119, 0.001166392515087348, 0.000506149109782841, 0.0013581392679873055, 0.0006206374562820577, 0.001425308545347352, 0.0008343665847864764, 0.0007917752524289893, 0.0014555786508689032, 0.0013011129059407908, 0.0011199640875767653, 0.0011029029958697534, 0.0009257236373803558, 0.001395087385060382, 0.001210315531989619, 0.00033068528680708117, 0.0013717480821332205, 0.00048418103921902433, 0.0011769531686219774, 0.00132224820634406, 0.0014318320628043904, 0.0005907175340781482, 0.00197128365098308, 0.00044198283357638077, 0.0011401219470670645, 0.0010724419873907333, 0.0008862402392531561, 0.0009980626282508145, 0.0008464889714870396, 0.0009036106210739292, 0.0013509947749335907, 0.0010116954602871935, 0.0010596835621942105, 0.0007587130856740572, 0.0013463568932116333, 0.001211655294713671, 0.0011694854166952558, 0.00023711853905856035, 0.001186052644043616, 0.0009542683057591883, 0.0017085567499717442, 0.0009853107114173166, 0.0007077382283188304, 0.0014197846077256895, 0.0005528531420833597, 0.0010809486278114872, 0.000420379790270009, 0.0010165422861218567, 0.0013054184004033557, 0.0018292649592132075, 0.0010029888172200627, 0.0011082100015546274, 0.001071219806848944, 0.0008526268366277248, 0.0010192748307061119, 0.0015878532760016432, 0.0011137621419273405, 0.0006733412618561544, 0.0008877209158451743, 0.0013593231289541873, 0.0009418928373762676, 0.0012694345923774013, 0.001294139445929072, 0.0012857245702257813, 0.0008544206400205958, 0.0009335377078928466, 0.0009550386700121063, 0.0018941820844353692, 0.0009490253461811489, 0.001220243208825131, 0.0009051600323197328, 0.0010962256370308588, 0.001264832932592566, 0.0004837956590084721, 0.0011868587140605898, 0.0009324616051582478, 0.0005043328585788606, 0.0011692150766934558, 0.0011246127183548956, 0.0013196114530781248, 0.0014529706482508684, 0.0010925602774138087, 0.0010631371586145334, 0.001069731622567682, 0.001262583030906547, 0.0010294591906133419, 0.0012089992040315708, 0.0005548495012404978, 0.0009561419622290917, 0.0008772966227359835, 0.0005455808259172279, 0.0010446520759653782, 0.0008089832626539339, 0.0009632257476829641, 0.0009151548560402016, 0.0016699914339087705, 0.0009830665303424027, 0.0019834623861758184, 0.0012325266347920601, 0.0009348238192080818, 0.0005525798675787933, 0.0015110662714850624, 0.0012205086136438386, 0.0011962657797020815, 0.0015346335995988273, 0.0012272549271888933, 0.0009395820684289506, 0.0009990216384228852, 0.0009903518119131658, 0.001955593746357912, 0.0011460394654644907, 0.001116351317964017, 0.0008395714247124012, 0.0015154671858311458, 0.0017150095704082226, 0.001122375657238471, 0.0016691877095903658, 0.0011696421135299977, 0.0007819573924275826, 0.002420161987815825, 0.0012307686471396818, 0.0008428870763760376, 0.0016276792663229907, 0.0007933836159221762, 0.0010621777725515174, 0.0005336098756873547, 0.0008647267926351223, 0.0007658707347345504, 0.0008327307686956445, 0.0013332700377219242, 0.0009762768642548035, 0.0007361215027186762, 0.0010715663453046182, 0.000944975557945339, 0.0010446673327023336, 0.000968722081710744, 0.0010747643053433177, 0.0013872976524582248, 0.0019424351690315066, 0.001211022083120183, 0.0011102122957439159, 0.001336822685604059, 0.001119576189030001, 0.0007549526542392965, 0.0011655059921355634, 0.0014612892877374879, 0.001933502904936574, 0.0016359817449377268, 0.0005854688715744624, 0.0012311257452308588, 0.0020275503455727682, 0.001003651473868964, 0.0016591197791435224, 0.0011050019296739999, 0.001056150289466666, 0.0018507229499388868, 0.00043811746339174215, 0.0012410029839097093, 0.0003786537348791533, 0.0015370248887300955, 0.0010202384060078186, 0.0017172397983272474, 0.0007186881171291404, 0.0011605960083255807, 0.0010534726304249772, 0.0010495245371716345, 0.00120248466825313, 0.0015851359845013317, 0.0005236484790357204, 0.0010001216247462585, 0.0014192660111044019, 0.000794766020429417, 0.001034368359641279, 0.0009785351357145709, 0.0010078757623306139, 0.001498414332365013, 0.0007948035192702969, 0.0009918831036901754, 0.0014408653343972724, 0.0010556227710910352, 0.0015038041712928207, 0.0008538170871215098, 0.0008906158422200415, 0.0012774613275580268, 0.0010266564641272114, 0.001017957522385511, 0.0012490562570609046, 0.0007981522330654136, 0.0017286334005500244, 0.0009750239008993385, 0.0007287220787093097, 0.0008565907424409944, 0.0011621338154933192, 0.0008568539422625976, 0.0014751670319843478, 0.000727284871445612, 0.0007715216529481806, 0.0010460581474815702, 0.0015425370354179803, 0.0007836913467307726, 0.0018495952613816413, 0.0015766510284924865, 0.000797704660889625, 0.0019065748755919053, 0.0007704093835993889, 0.0014878536591295408, 0.0005569581571021038, 0.0011500220746286111, 0.0011149643361423752, 0.00038310652107428634, 0.0009399582643236053, 0.002219495034031571, 0.0010824075907100391, 0.0006634621464608369, 0.0012456015560829811, 0.0009723071195107168, 0.0005868330854310977, 0.0011532859032592747, 0.0012664621093413802, 0.0014708567061594983, 0.001464151001929973, 0.0008461070306343205, 0.001049309462561172, 0.0017451321400090368, 0.0011411364700789487, 0.0017983941103640313, 0.0010776803587142722, 0.0008242109284039615, 0.0013929270092129587, 0.001632966877630659, 0.0013234730621598252, 0.0014335267792983143, 0.001289312432096134, 0.0011469844264500313, 0.0008816298798218752, 0.0006139238517191006, 0.001097629804772612, 0.001703390659682402, 0.001008677336230021, 0.0009985962627552494, 0.001224010933695027, 0.0009665137071747954, 0.0014605718719208685, 0.0007561923023525019, 0.0009502189773243078, 0.001184093109705866, 0.0013689716199890036, 0.0016203582773865037, 0.0010243058740917758, 0.0011307485155236535, 0.001355152822957189, 0.0010960379644568755, 0.0008685585848119222, 0.0009466299661797069, 0.0014762615059987223, 0.0008284994988124314, 0.0013970543730345134, 0.0006922811930656118, 0.0015355874953716542, 0.00133033766036054, 0.0007690289462258006, 0.00035547570204161127, 0.001171393351544212, 0.0015468307735398519, 0.0007748006564919465, 0.0008034131046356829, 0.001414462229364143, 0.0008645229644381411, 0.0013014469258393047, 0.0006059249992338965, 0.0016668589605042183, 0.0012827264627494576, 0.0014614195406123978, 0.0010102372971793887, 0.000790284326428471, 0.001200659766908373, 0.0009529737770975388, 0.0007090431854335062, 0.0010426560751001512, 0.0019198870017953468, 0.0010493131192598607, 0.00100299004113078, 0.0010487630963121521, 0.0017763334010730415, 0.00025938394805378963, 0.0018999883962968177, 0.001786195862972975, 0.0005524015993904873, 0.001730623352803248, 0.0011134505820889074, 0.0012376499917062464, 0.0006010171735513716, 0.0013017786104944772, 0.001769089055180968, 0.0013200498950972702, 0.0012004120160324285, 0.001312247160624868, 0.0017995301676037108, 0.001231623806958682, 0.0008779483198326861, 0.0015955051461677978, 0.000977174591758622, 0.0012694796304481245, 0.0018626106851198593, 0.000651552935030101, 0.0018656728538103276, 0.0005177177007108302, 0.0010768177626462822, 0.0015856427319479432, 0.001205271040260331, 0.000714790875099841, 0.0011055098536620464, 0.0015383294466517234, 0.0007432458101093775, 0.0008742073892183442, 0.0011073526634885614, 0.0013423575515720423, 0.0008374285321350955, 0.001908118513380581, 0.000900266375257174, 0.0012231704451587252, 0.0012059300684555375, 0.0011129222920186366, 0.0014120962504971654, 0.0006718267473380205, 0.0009081621339813508, 0.0012101354827474613, 0.0007245145610883319, 0.0015428816182196492, 0.0009675718353640825, 0.0010538832923923567, 0.0008765091113106996, 0.0013045868352144765, 0.001507654924819111, 0.0010999500369227454, 0.0013840975588491312, 0.0018143236482253426, 0.0018959586672859675, 0.0007947214101714399, 0.0013628924624716954, 0.0009198592926659789, 0.0017610846273305202]
    # y_std = [-y for y in y_std]

    # Calculate mean and standard deviation
    # mean_y = np.mean(y)
    # std_y = np.std(y)

    y_mean = np.array(y_mean)
    y_std = np.array(y_std)
    # Plot the data
    plt.plot(x, y_mean[0:100])
    # plt.axhline(y=mean_y, color='r', linestyle='--', label='Mean')
    # plt.fill_between(x, y_mean[0:100] - y_std[0:100], y_mean[0:100] + y_std[0:100], color='red', alpha=0.2, label='Std Dev')

    # Add labels and title
    plt.xlabel('residual')
    plt.ylabel('round')
    plt.title('residual vs round')

    # Add legend
    plt.legend()

    # Show plot
    plt.grid(True)
    plt.show()


def main():
    # plot_accuracy()
    # plot_time_to_accuracy()
    # plot_detection_rate()
    # plot_pca_scatter1()
    plot_residual_vs_epoch()
    

if __name__ == '__main__':
    main()
